<%= render 'client' %>

<script>

  // template sources

  var todoItemsTemplate = $('[data-todo-items-template]').html();

  var todoItemTemplate = $('[data-todo-item-template]').html();

  // mock todo data

  var todoItems = {
    complete: [{title: "a"}, {title: "b"}],
    incomplete: [{title: "c"}, {title: "d"}],
    in_progress: [{title: "e"}, {title: "f"}]
  }

  // render helpers

  var renderTodoItem = function(todoListItem) {
    return Mustache.render(todoItemTemplate, todoListItem);
  }

  var renderTodoItems = function(todoItems) {
    return Mustache.render(todoItemsTemplate, {
      todoItems: _.map(todoItems, renderTodoItem).join('')
    });
  }

  // mock list data

  // View classes

  var TodoListsView = Backbone.View.extend({

    initialize: function(){
      _.bindAll(this, "render");
      this.collection.on('add', this.render);
    },

    render: function() {
      var listsData = this.collection
      this.$el.html(this.renderLists(listsData));
    },

    renderLists: function(lists) {
      var _this = this;
      return _.map(lists.models, function(listModel){
        return Mustache.render(_this.todoListTemplate, listModel.attributes);
      }).join('');
    },

    todoListTemplate: $('[data-todo-list-template]').html()

  });

  var TodoListCreatorView = Backbone.View.extend({

    initialize: function(){
      _.bindAll(this, "saved", "saveError");
    },

    events: {
      "submit": "trySave"
    },

    trySave: function(event){
      event.preventDefault();

      var listName = this.$el.find("input").val();

      this.saving(true);

      var newTodoList = this.collection.create(
        { name: listName }, // model attributes
        { success: this.saved, error: this.saveError, wait: true } // options to create
      );

      if (newTodoList.validationError) {
        alert("Invalid!");
        this.saving(false);
      }
    },

    saving: function(toggle) {
      this.$el.toggleClass('saving', toggle);
    },

    saved: function(){
      this.saving(false);
      this.$el.find("input").val('');
    },

    saveError: function(){
      alert("Save unsuccessful, try again?");
      this.saving(false);
    }


  });


  var TodoListModel = Backbone.Model.extend({

    validate: function(attrs) {
      if (attrs.name == '') return "Invalid";
    }

  });

  var TodoListsCollection = Backbone.Collection.extend({
    model: TodoListModel
  });


  // Application Init

  Backbone.sync = function(method, model, options){
    setTimeout(function(){
      options.success();
    }, 1000)
  };

  var app = {}
  window.app = app;


  var todoListCollection = new TodoListsCollection([
    {
      name: "Our list name!!",
      id: 1,
      completedTodoItems: renderTodoItems(todoItems.complete),
      wipTodoItems: renderTodoItems(todoItems.incomplete),
      incompleteTodoItems: renderTodoItems(todoItems.in_progress)
    }
  ]);

  app.todoListView = new TodoListsView({
    el: $('.todo-lists'),
    collection: todoListCollection
  });
  app.todoListView.render();

  app.todoListCreatorView = new TodoListCreatorView({
    el: $('.list-creator'),
    collection: todoListCollection
  });

  $('body').removeClass('loading');

</script>
